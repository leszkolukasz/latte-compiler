#!/bin/bash
# Generated by GPT

if [ $# -lt 1 ]; then
    echo -e "\033[31mUsage: $0 /path/to/compiler\033[0m"
    exit 1
fi

COMPILER=$1

declare -A TEST_FOLDERS
TEST_FOLDERS=(
    ["cases/good"]=0
    ["cases/bad"]=1
    ["cases/error"]=0
    ["cases/extensions/arrays"]=0
    ["cases/extensions/objects"]=0
    ["cases/extensions/struct"]=0
    ["cases/extensions/mix"]=0
)

declare -A EXPECTED_BINARY_BEHAVIOR
EXPECTED_BINARY_BEHAVIOR=(
    ["cases/good"]=0
    ["cases/bad"]=1
    ["cases/error"]=1
    ["cases/extensions/arrays"]=0
    ["cases/extensions/objects"]=0
    ["cases/extensions/struct"]=0
    ["cases/extensions/mix"]=0
)

declare -A TOTAL_TESTS
declare -A PASSED_TESTS

ulimit -s 1000000

for FOLDER in "${!TEST_FOLDERS[@]}"; do
    TOTAL_TESTS["$FOLDER"]=0
    PASSED_TESTS["$FOLDER"]=0

    echo -e "\033[34mRunning tests in folder '$FOLDER' (Expected compiler exit code: ${TEST_FOLDERS[$FOLDER]}, Expected binary behavior: ${EXPECTED_BINARY_BEHAVIOR[$FOLDER]})\033[0m"

    for TEST_FILE in "$FOLDER"/*.lat; do
        if [ ! -e "$TEST_FILE" ]; then
            echo -e "  \033[33mNo test files found in folder '$FOLDER'. Skipping.\033[0m"
            break
        fi

        TOTAL_TESTS["$FOLDER"]=$((TOTAL_TESTS["$FOLDER"] + 1))

        OUTPUT_FILE="${TEST_FILE%.lat}.output"
        INPUT_FILE="${TEST_FILE%.lat}.input"
        BINARY_FILE="${TEST_FILE%.lat}"

        # Run the compiler
        $COMPILER "$TEST_FILE" 2> /dev/null
        ACTUAL_EXIT_CODE=$?

        # Check compiler exit code
        if [ $ACTUAL_EXIT_CODE -eq ${TEST_FOLDERS[$FOLDER]} ]; then
            if [ $ACTUAL_EXIT_CODE -eq 0 ]; then
                if [ -f "$OUTPUT_FILE" ] && [ -f "$BINARY_FILE" ]; then
                    # Run the binary with input file if it exists, otherwise without input
                    if [ -f "$INPUT_FILE" ]; then
                        ./$BINARY_FILE < "$INPUT_FILE" &> binary_output.tmp
                    else
                        ./$BINARY_FILE > binary_output.tmp
                    fi
                    BINARY_EXIT_CODE=$?

                    # Check binary behavior
                    if [ $BINARY_EXIT_CODE -eq ${EXPECTED_BINARY_BEHAVIOR[$FOLDER]} ]; then
                        if diff -u binary_output.tmp "$OUTPUT_FILE" > diff_output.tmp; then
                            echo -e "  \033[32m[PASS] $TEST_FILE (Compiler and binary behavior correct, output matches)\033[0m"
                            PASSED_TESTS["$FOLDER"]=$((PASSED_TESTS["$FOLDER"] + 1))
                        else
                            echo -e "  \033[31m[FAIL] $TEST_FILE (Output mismatch)\033[0m"
                            echo -e "  \033[36mDiff:\033[0m"; cat diff_output.tmp
                        fi
                    else
                        echo -e "  \033[31m[FAIL] $TEST_FILE (Binary exited with code $BINARY_EXIT_CODE, expected ${EXPECTED_BINARY_BEHAVIOR[$FOLDER]})\033[0m"
                    fi
                else
                    echo -e "  \033[31m[FAIL] $TEST_FILE (Binary or output file missing)\033[0m"
                fi
            else
                echo -e "  \033[32m[PASS] $TEST_FILE (Exit code matches, no output check required)\033[0m"
                PASSED_TESTS["$FOLDER"]=$((PASSED_TESTS["$FOLDER"] + 1))
            fi
        else
            echo -e "  \033[31m[FAIL] $TEST_FILE (Expected compiler exit code: ${TEST_FOLDERS[$FOLDER]}, Got: $ACTUAL_EXIT_CODE)\033[0m"
        fi
    done

    # Clean up temporary files
    rm -f binary_output.tmp diff_output.tmp "$BINARY_FILE"
done

echo -e "\n\033[1mTest Summary:\033[0m"
for FOLDER in "${!TEST_FOLDERS[@]}"; do
    TOTAL=${TOTAL_TESTS["$FOLDER"]}
    PASSED=${PASSED_TESTS["$FOLDER"]}

    if [ "$TOTAL" -gt 0 ]; then
        PERCENTAGE=$((PASSED * 100 / TOTAL))
    else
        PERCENTAGE=0
    fi

    echo -e "  \033[34m$FOLDER:\033[0m \033[32m$PASSED/$TOTAL tests passed (${PERCENTAGE}%)\033[0m"
done
